// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enum definitions
enum UserRole {
  ADMIN
  CLIENT_ADMIN
  CLIENT_USER
  VIEWER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  CLOSED
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  FAILED
  TIMEOUT
}

// Core Models

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  role      UserRole @default(CLIENT_USER)
  clientId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client   Client? @relation(fields: [clientId], references: [id])
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  domain      String?  @unique
  settings    String?  // JSON string for client-specific settings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users              User[]
  agents             Agent[]
  conversations      Conversation[]
  leads              Lead[]
  analytics          Analytics[]
  knowledgeDocuments KnowledgeDocument[]

  @@map("clients")
}

model Agent {
  id               String   @id @default(cuid())
  clientId         String
  externalId       String   // ElevenLabs agent ID
  name             String
  description      String?
  isActive         Boolean  @default(true)
  settings         String?  // JSON string for agent configuration
  currentPromptId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  client        Client         @relation(fields: [clientId], references: [id])
  currentPrompt Prompt?        @relation(fields: [currentPromptId], references: [id])
  prompts       Prompt[]       @relation("AgentPrompts")
  conversations Conversation[]
  leads         Lead[]

  @@unique([clientId, externalId])
  @@map("agents")
}

model Prompt {
  id        String   @id @default(cuid())
  agentId   String
  version   Int      @default(1)
  title     String
  content   String
  variables String?  // JSON string for prompt variables
  metadata  String?  // JSON string for additional metadata
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  tags      String?  // JSON string instead of String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agent             Agent           @relation("AgentPrompts", fields: [agentId], references: [id])
  currentForAgents  Agent[]
  conversations     Conversation[]

  @@unique([agentId, version])
  @@map("prompts")
}

model Conversation {
  id                      String             @id @default(cuid())
  clientId                String
  agentId                 String
  promptId                String?
  externalId              String?            // ElevenLabs conversation ID
  elevenLabsConversationId String?           // Enhanced: ElevenLabs conversation ID
  status                  ConversationStatus @default(ACTIVE)
  startedAt               DateTime           @default(now())
  endedAt                 DateTime?
  duration                Int?               // seconds
  transcript              String?
  transcriptJson          Json?              // Enhanced: Structured transcript data
  summary                 String?
  sentimentScore          Float?             // Enhanced: Sentiment analysis score
  topics                  String[]           // Enhanced: Extracted topics
  language                String             @default("ru") // Enhanced: Language code
  metadata                String?            // JSON string for additional data
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  // Relations
  client               Client  @relation(fields: [clientId], references: [id])
  agent                Agent   @relation(fields: [agentId], references: [id])
  prompt               Prompt? @relation(fields: [promptId], references: [id])
  leads                Lead[]
  sourceLeads          Lead[]  @relation("LeadSourceConversation")

  @@map("conversations")
}

model Lead {
  id                    String     @id @default(cuid())
  clientId              String
  agentId               String
  conversationId        String?
  sourceConversationId  String?    // Enhanced: Reference to source conversation
  contactInfo           String     // JSON string for contact information
  source                String     @default("voice_widget")
  status                LeadStatus @default(NEW)
  score                 Int?       // lead quality score 1-100
  conversationSummary   String?    // Enhanced: Summary from conversation
  extractedEntities     Json?      // Enhanced: Extracted entities (names, phones, etc.)
  leadQualityScore      Int?       // Enhanced: AI-calculated lead quality score
  notes                 String?
  metadata              String?    // JSON string for additional lead data
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  // Relations
  client             Client         @relation(fields: [clientId], references: [id])
  agent              Agent          @relation(fields: [agentId], references: [id])
  conversation       Conversation?  @relation(fields: [conversationId], references: [id])
  sourceConversation Conversation?  @relation("LeadSourceConversation", fields: [sourceConversationId], references: [id])
  activities         LeadActivity[]

  @@map("leads")
}

model LeadActivity {
  id           String   @id @default(cuid())
  leadId       String
  userId       String?  // user who performed the activity
  activityType String   // 'email', 'call', 'meeting', 'note'
  description  String?
  metadata     String?  // JSON string for activity-specific data
  createdAt    DateTime @default(now())

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])

  @@map("lead_activities")
}

model Analytics {
  id         String   @id @default(cuid())
  clientId   String
  date       DateTime
  metric     String   // 'conversations', 'leads', 'conversions', etc.
  value      Float
  metadata   String?  // JSON string for additional metric data
  createdAt  DateTime @default(now())

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@unique([clientId, date, metric])
  @@map("analytics")
}

// Knowledge Base for RAG System
model KnowledgeDocument {
  id           String   @id @default(cuid())
  clientId     String
  title        String
  content      String
  contentType  String   @default("text")
  metadata     Json?    // Additional document metadata
  // Note: Vector embeddings will be handled separately in Supabase
  // embedding VECTOR(1536) - PostgreSQL extension needed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@map("knowledge_documents")
}

// API Integration Logging
model ApiLog {
  id              String   @id @default(cuid())
  serviceName     String   // 'elevenlabs', 'openai', etc.
  endpoint        String   // API endpoint called
  method          String   // HTTP method
  statusCode      Int?     // Response status code
  responseTimeMs  Int?     // Response time in milliseconds
  errorMessage    String?  // Error message if failed
  metadata        Json?    // Additional request/response data
  createdAt       DateTime @default(now())

  @@map("api_logs")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

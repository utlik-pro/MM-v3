import type { NextApiRequest, NextApiResponse } from 'next'
import { supabase } from '../../lib/supabase'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { conversation_id, lead_info, client_intent, conversation_data } = req.body

    if (!conversation_id || !lead_info) {
      return res.status(400).json({ 
        error: 'Missing required fields',
        details: 'conversation_id and lead_info are required'
      })
    }

    console.log('üìù Creating lead from conversation:', conversation_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ª–∏–¥ —Å —Ç–∞–∫–∏–º conversation_id
    const { data: existingLead } = await supabase
      .from('leads')
      .select('id')
      .eq('conversation_id', conversation_id)
      .single()

    if (existingLead) {
      return res.status(409).json({
        error: 'Lead already exists',
        details: `Lead with conversation_id ${conversation_id} already exists`
      })
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–¥
    const { data: newLead, error } = await supabase
      .from('leads')
      .insert({
        client_id: 'default-client',
        agent_id: 'agent_2001k4cgbmjhebd92cbzn8fk2zmk',
        conversation_id: conversation_id,
        contact_info: JSON.stringify({
          name: lead_info.name,
          phone: lead_info.phone,
          extracted_from: lead_info.extracted_from
        }),
        conversation_summary: client_intent || '–û–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
        extracted_entities: {
          intent: client_intent,
          source: 'conversation',
          conversation_data: {
            duration: conversation_data?.duration_seconds || 0,
            status: conversation_data?.status || 'unknown',
            agent_id: conversation_data?.agent_id || 'agent_2001k4cgbmjhebd92cbzn8fk2zmk'
          }
        },
        lead_quality_score: calculateLeadQuality(lead_info, client_intent),
        source: 'conversation',
        status: 'NEW'
      })
      .select('id, conversation_id, contact_info, conversation_summary, lead_quality_score, created_at')
      .single()

    if (error) {
      throw new Error(`Database error: ${error.message}`)
    }

    console.log('‚úÖ Lead created successfully:', newLead.id)

    return res.status(201).json({
      success: true,
      lead: {
        id: newLead.id,
        conversation_id: newLead.conversation_id,
        contact_info: JSON.parse(newLead.contact_info),
        conversation_summary: newLead.conversation_summary,
        lead_quality_score: newLead.lead_quality_score,
        created_at: newLead.created_at
      }
    })

  } catch (error) {
    console.error('‚ùå Create lead error:', error)
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}

function calculateLeadQuality(leadInfo: any, clientIntent: string | null): number {
  let score = 0
  
  // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  if (leadInfo.name && leadInfo.name !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') score += 30
  if (leadInfo.phone && leadInfo.phone !== '–ù–µ —É–∫–∞–∑–∞–Ω') score += 30
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
  if (clientIntent) {
    if (clientIntent.includes('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')) score += 20
    else if (clientIntent.includes('–ü–æ–∫—É–ø–∫–∞ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')) score += 15
    else if (clientIntent.includes('–ò–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')) score += 10
  }
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª 100
  return Math.min(score, 100)
} 
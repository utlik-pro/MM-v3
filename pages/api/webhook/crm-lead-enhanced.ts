import type { NextApiRequest, NextApiResponse } from 'next'
import { supabase } from '../../../lib/supabase'
import { ApiLogger } from '../../../lib/api-logger'

interface CRMLeadData {
  Phone: string
  FullName: string
  UsrMinskMir?: string
  Commentary?: string
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
  conversation_id?: string
  agent_id?: string
  tool_call_id?: string
  source?: string
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const startTime = Date.now()

  // Set CORS headers for ElevenLabs Tool
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Lead-Source')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  if (req.method !== 'POST') {
    await ApiLogger.log({
      serviceName: 'crm-lead-webhook',
      endpoint: '/api/webhook/crm-lead-enhanced',
      method: req.method || 'UNKNOWN',
      statusCode: 405,
      responseTimeMs: Date.now() - startTime,
      errorMessage: 'Method not allowed'
    })
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    console.log('üéØ CRM Lead Enhanced Webhook received:', JSON.stringify(req.body, null, 2))
    console.log('üìã Headers:', req.headers)

    const leadData: CRMLeadData = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!leadData.Phone || !leadData.FullName) {
      await ApiLogger.log({
        serviceName: 'crm-lead-webhook',
        endpoint: '/api/webhook/crm-lead-enhanced',
        method: 'POST',
        statusCode: 400,
        responseTimeMs: Date.now() - startTime,
        errorMessage: 'Missing required fields: Phone or FullName'
      })
      return res.status(400).json({ 
        error: 'Missing required fields',
        required: ['Phone', 'FullName'],
        received: Object.keys(leadData)
      })
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizedPhone = normalizePhone(leadData.Phone)
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–∞
    const enhancedAnalysis = analyzeRealLead(leadData)
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    let relatedConversation = null
    if (leadData.conversation_id) {
      const { data: conversationData } = await supabase
        .from('conversations')
        .select('*')
        .eq('eleven_labs_conversation_id', leadData.conversation_id)
        .single()
      
      if (conversationData) {
        relatedConversation = conversationData
        console.log('üîó Found related conversation:', conversationData.id)
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    const enhancedLeadData = {
      client_id: 'default-client',
      agent_id: leadData.agent_id || 'agent_01jxkr0mstfk6ttayjsghjm7xc',
      conversation_id: null, // –ü–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ conversations
      source_conversation_id: null,
      
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      contact_info: JSON.stringify({
        name: leadData.FullName,
        phone: normalizedPhone,
        original_phone: leadData.Phone,
        email: null // CRM tool –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç email
      }),
      
      // –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö CRM
      conversation_summary: generateCRMSummary(leadData, enhancedAnalysis),
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
      extracted_entities: {
        name: leadData.FullName,
        phone: normalizedPhone,
        original_phone: leadData.Phone,
        project: leadData.UsrMinskMir || null,
        commentary: leadData.Commentary || null,
        
        // –ê–Ω–∞–ª–∏–∑
        ...enhancedAnalysis,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        extraction_method: 'crm_tool_direct',
        tool_id: 'xi4EFSeulNpmBWxSC9b4',
        tool_call_id: leadData.tool_call_id || null,
        extracted_at: new Date().toISOString()
      },
      
      // –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö)
      lead_quality_score: calculateCRMLeadScore(leadData, enhancedAnalysis, relatedConversation),
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
      source: 'crm_tool_elevenlabs',
      status: 'NEW',
      score: calculateCRMLeadScore(leadData, enhancedAnalysis, relatedConversation), // backward compatibility
      notes: `CRM Tool Lead: ${leadData.Commentary || 'No additional comments'}`,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      metadata: JSON.stringify({
        tool_id: 'xi4EFSeulNpmBWxSC9b4',
        tool_name: 'SendToCRMLead',
        original_payload: leadData,
        eleven_labs_conversation_id: leadData.conversation_id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ElevenLabs ID
        conversation_id: leadData.conversation_id, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        agent_id: leadData.agent_id,
        project: leadData.UsrMinskMir,
        source_headers: {
          'x-lead-source': req.headers['x-lead-source'],
          'user-agent': req.headers['user-agent']
        },
        processed_at: new Date().toISOString()
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const { data: existingLeads } = await supabase
      .from('leads')
      .select('id, contact_info, created_at')
      .contains('contact_info', { phone: normalizedPhone })
      .order('created_at', { ascending: false })
      .limit(5)

    let isDuplicate = false
    let duplicateInfo = null

    if (existingLeads && existingLeads.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
      const latestLead = existingLeads[0]
      const timeDiff = Date.now() - new Date(latestLead.created_at).getTime()
      const hoursDiff = timeDiff / (1000 * 60 * 60)

      // –°—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–º, –µ—Å–ª–∏ –ª–∏–¥ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
      if (hoursDiff < 1) {
        isDuplicate = true
        duplicateInfo = {
          existing_lead_id: latestLead.id,
          hours_since_last: Math.round(hoursDiff * 100) / 100,
          total_leads_with_phone: existingLeads.length
        }
      }
    }

    if (isDuplicate) {
      console.log('‚ö†Ô∏è Potential duplicate lead detected:', duplicateInfo)
      
      await ApiLogger.log({
        serviceName: 'crm-lead-webhook',
        endpoint: '/api/webhook/crm-lead-enhanced',
        method: 'POST',
        statusCode: 200,
        responseTimeMs: Date.now() - startTime,
        metadata: { 
          duplicate_detected: true, 
          duplicate_info: duplicateInfo,
          phone: normalizedPhone
        }
      })

      return res.status(200).json({
        success: true,
        message: 'Potential duplicate lead detected',
        duplicate_info: duplicateInfo,
        action: 'not_saved',
        lead_data: enhancedLeadData
      })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data: newLead, error } = await supabase
      .from('leads')
      .insert(enhancedLeadData)
      .select('id, contact_info, conversation_summary, lead_quality_score, source, status, created_at')
      .single()

    if (error) {
      throw new Error(`Database error: ${error.message}`)
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await ApiLogger.log({
      serviceName: 'crm-lead-webhook',
      endpoint: '/api/webhook/crm-lead-enhanced',
      method: 'POST',
      statusCode: 200,
      responseTimeMs: Date.now() - startTime,
      metadata: {
        lead_id: newLead.id,
        quality_score: enhancedLeadData.lead_quality_score,
        has_conversation_link: !!relatedConversation,
        phone: normalizedPhone
      }
    })

    console.log('‚úÖ CRM lead processed successfully:', {
      id: newLead.id,
      phone: normalizedPhone,
      name: leadData.FullName,
      quality_score: enhancedLeadData.lead_quality_score
    })

    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –†–ê–ó–ì–û–í–û–†–ê (–µ—Å–ª–∏ –Ω–µ—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ)
    if (!relatedConversation) {
      try {
        console.log('üîç Auto-linking conversation for direct CRM lead:', newLead.id)
        
        // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è)
        const { smartLinkConversation } = await import('../../../lib/smart-linking')
        const linkResult = await smartLinkConversation(newLead.id)
        
        if (linkResult.success) {
          console.log('‚úÖ Auto-linked conversation:', linkResult.linked_conversation!.conversation_id, 
                     `(${linkResult.linked_conversation!.match_score}% match)`)
        } else {
          console.log('‚ÑπÔ∏è No matching conversation found during auto-linking')
        }
      } catch (autoLinkError) {
        console.warn('‚ö†Ô∏è Auto-linking failed (non-critical):', autoLinkError)
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
      }
    }

    return res.status(200).json({
      success: true,
      message: 'CRM lead processed successfully',
      lead: newLead,
      enhanced_analysis: enhancedAnalysis,
      conversation_link: relatedConversation ? {
        id: relatedConversation.id,
        duration: relatedConversation.duration,
        eleven_labs_id: relatedConversation.eleven_labs_conversation_id
      } : null,
      quality_score: enhancedLeadData.lead_quality_score
    })

  } catch (error) {
    console.error('‚ùå CRM lead webhook error:', error)
    
    await ApiLogger.log({
      serviceName: 'crm-lead-webhook',
      endpoint: '/api/webhook/crm-lead-enhanced',
      method: 'POST',
      statusCode: 500,
      responseTimeMs: Date.now() - startTime,
      errorMessage: error instanceof Error ? error.message : 'Unknown error'
    })
    
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}

function normalizePhone(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
  const digits = phone.replace(/\D/g, '')
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  if (digits.startsWith('375')) {
    return `+${digits}`
  } else if (digits.startsWith('80') && digits.length === 11) {
    return `+375${digits.substring(2)}`
  } else if (digits.length === 9) {
    return `+375${digits}`
  }
  
  return phone // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
}

function analyzeRealLead(leadData: CRMLeadData) {
  const analysis = {
    has_project_info: !!leadData.UsrMinskMir,
    has_commentary: !!leadData.Commentary,
    phone_type: 'unknown' as 'mobile' | 'landline' | 'unknown',
    name_completeness: 'unknown' as 'full' | 'partial' | 'unknown',
    estimated_intent: [] as string[]
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–æ–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  const normalizedPhone = normalizePhone(leadData.Phone)
  if (normalizedPhone.includes('+375')) {
    const operatorCode = normalizedPhone.substring(4, 6)
    if (['29', '44', '33', '25'].includes(operatorCode)) {
      analysis.phone_type = 'mobile'
    } else {
      analysis.phone_type = 'landline'
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –∏–º–µ–Ω–∏
  const nameParts = leadData.FullName.trim().split(/\s+/)
  if (nameParts.length >= 2) {
    analysis.name_completeness = 'full'
  } else {
    analysis.name_completeness = 'partial'
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
  if (leadData.Commentary) {
    const commentary = leadData.Commentary.toLowerCase()
    if (commentary.includes('–∫—É–ø–∏—Ç—å') || commentary.includes('–ø–æ–∫—É–ø–∫–∞')) {
      analysis.estimated_intent.push('purchase')
    }
    if (commentary.includes('—Ü–µ–Ω–∞') || commentary.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      analysis.estimated_intent.push('pricing')
    }
    if (commentary.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') || commentary.includes('—É–∑–Ω–∞—Ç—å')) {
      analysis.estimated_intent.push('information')
    }
  }

  return analysis
}

function calculateCRMLeadScore(
  leadData: CRMLeadData, 
  analysis: any, 
  conversation: any
): number {
  let score = 60 // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è CRM –ª–∏–¥–æ–≤

  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è)
  score += 20 // phone
  score += 15 // name

  // –ü–æ–ª–Ω–æ—Ç–∞ –∏–º–µ–Ω–∏
  if (analysis.name_completeness === 'full') score += 10

  // –¢–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (analysis.phone_type === 'mobile') score += 5

  // –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (analysis.has_project_info) score += 10

  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  if (analysis.has_commentary) score += 8

  // –ò–Ω—Ç–µ–Ω—Ç
  if (analysis.estimated_intent.includes('purchase')) score += 15
  else if (analysis.estimated_intent.includes('pricing')) score += 10

  // –°–≤—è–∑—å —Å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º
  if (conversation) {
    score += 10
    if (conversation.duration > 60) score += 5
  }

  return Math.min(Math.max(score, 0), 100)
}

function generateCRMSummary(leadData: CRMLeadData, analysis: any): string {
  const parts: string[] = []
  
  parts.push(`–ö–ª–∏–µ–Ω—Ç: ${leadData.FullName}`)
  
  if (leadData.UsrMinskMir) {
    parts.push(`–ü—Ä–æ–µ–∫—Ç: ${leadData.UsrMinskMir}`)
  }
  
  if (analysis.estimated_intent.length > 0) {
    parts.push(`–ò–Ω—Ç–µ–Ω—Ç: ${analysis.estimated_intent.join(', ')}`)
  }
  
  const summary = parts.join(' | ')
  const commentary = leadData.Commentary ? `\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${leadData.Commentary}` : ''
  
  return `${summary}${commentary}`
} 
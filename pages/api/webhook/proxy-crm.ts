import type { NextApiRequest, NextApiResponse } from 'next'
import { supabase } from '../../../lib/supabase'

interface ProxyLead {
  Phone: string
  FullName: string
  UsrMinskMir?: string
  Commentary?: string
  [key: string]: any
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  console.log('üîÑ Proxy CRM Webhook called:', {
    method: req.method,
    headers: req.headers,
    body: req.body,
    timestamp: new Date().toISOString()
  })

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const leadData: ProxyLead = req.body

    console.log('üìû Incoming lead data:', leadData)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!leadData.Phone || !leadData.FullName) {
      console.error('‚ùå Missing required fields:', { 
        hasPhone: !!leadData.Phone, 
        hasName: !!leadData.FullName 
      })
      return res.status(400).json({ 
        error: 'Missing required fields: Phone and FullName are required' 
      })
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizePhone = (phone: string): string => {
      const cleaned = phone.replace(/[^\d+]/g, '')
      if (cleaned.startsWith('375')) return '+' + cleaned
      if (cleaned.startsWith('+375')) return cleaned
      if (cleaned.startsWith('8') && cleaned.length === 13) {
        return '+375' + cleaned.slice(1)
      }
      return cleaned.startsWith('+') ? cleaned : '+' + cleaned
    }

    const normalizedPhone = normalizePhone(leadData.Phone)

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const enhancedLeadData = {
      client_id: 'default-client',
      agent_id: 'agent_01jxkr0mstfk6ttayjsghjm7xc', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π agent
      conversation_id: null,
      source_conversation_id: null,
      contact_info: JSON.stringify({
        name: leadData.FullName,
        phone: normalizedPhone,
        original_phone: leadData.Phone,
        email: null
      }),
      conversation_summary: `Proxy Lead: ${leadData.FullName} (${normalizedPhone})`,
      extracted_entities: {
        name: leadData.FullName,
        phone: normalizedPhone,
        original_phone: leadData.Phone,
        project: leadData.UsrMinskMir || null,
        commentary: leadData.Commentary || null,
        extraction_method: 'proxy_crm_webhook',
        tool_id: 'xi4EFSeulNpmBWxSC9b4',
        extracted_at: new Date().toISOString()
      },
      lead_quality_score: 85, // –ë–∞–∑–æ–≤—ã–π score –¥–ª—è proxy –ª–∏–¥–æ–≤
      source: 'proxy_crm_elevenlabs',
      status: 'NEW',
      score: 85,
      notes: `Proxy CRM Lead: ${leadData.Commentary || 'No additional comments'}`,
      metadata: JSON.stringify({
        proxy_source: true,
        original_tool_url: 'office.bir.by',
        tool_id: 'xi4EFSeulNpmBWxSC9b4',
        received_at: new Date().toISOString(),
        original_payload: leadData
      })
    }

    console.log('üíæ Saving proxy lead to database...')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString()
    const { data: existingLeads } = await supabase
      .from('leads')
      .select('id, contact_info, created_at')
      .gte('created_at', fiveMinutesAgo)
      .eq('source', 'proxy_crm_elevenlabs')

    const isDuplicate = existingLeads?.some(lead => {
      try {
        const contactInfo = JSON.parse(lead.contact_info)
        return contactInfo.phone === normalizedPhone
      } catch {
        return false
      }
    })

    if (isDuplicate) {
      console.log('‚ö†Ô∏è Duplicate lead detected, skipping save')
      return res.status(200).json({
        success: true,
        message: 'Duplicate lead detected, not saved',
        phone: normalizedPhone,
        name: leadData.FullName,
        action: 'skipped_duplicate'
      })
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data: newLead, error } = await supabase
      .from('leads')
      .insert(enhancedLeadData)
      .select('id, contact_info, conversation_summary, lead_quality_score, source, status, created_at')
      .single()

    if (error) {
      console.error('‚ùå Database save error:', error)
      throw new Error(`Database save failed: ${error.message}`)
    }

    console.log('‚úÖ Proxy lead saved successfully:', newLead?.id)

    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –†–ê–ó–ì–û–í–û–†–ê
    // –ó–∞–ø—É—Å–∫–∞–µ–º smart linking –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    try {
      console.log('üîç Auto-linking conversation for lead:', newLead?.id)
      
      // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è)
      const { smartLinkConversation } = await import('../../../lib/smart-linking')
      const linkResult = await smartLinkConversation(newLead?.id!)
      
      if (linkResult.success) {
        console.log('‚úÖ Auto-linked conversation:', linkResult.linked_conversation!.conversation_id, 
                   `(${linkResult.linked_conversation!.match_score}% match)`)
      } else {
        console.log('‚ÑπÔ∏è No matching conversation found during auto-linking')
      }
    } catch (autoLinkError) {
      console.warn('‚ö†Ô∏è Auto-linking failed (non-critical):', autoLinkError)
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    }

    // –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é CRM —Å–∏—Å—Ç–µ–º—É
    try {
      console.log('üîÑ Forwarding to original CRM...')
      
      const originalCrmUrl = 'https://office.bir.by:2121/0/ServiceModel/GeneratedObjectWebFormService.svc/SaveWebFormObjectData'
      
      const crmResponse = await fetch(originalCrmUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Lead-Source': 'belhard-voice-agent'
        },
        body: JSON.stringify(leadData)
      })

      if (crmResponse.ok) {
        console.log('‚úÖ Successfully forwarded to original CRM')
      } else {
        console.warn('‚ö†Ô∏è CRM forward failed:', crmResponse.status, crmResponse.statusText)
      }
    } catch (forwardError) {
      console.error('‚ùå Error forwarding to CRM:', forwardError)
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    return res.status(200).json({
      success: true,
      message: 'Proxy lead processed and forwarded successfully',
      lead: {
        id: newLead?.id,
        contact_info: newLead?.contact_info,
        lead_quality_score: newLead?.lead_quality_score,
        source: newLead?.source,
        created_at: newLead?.created_at
      },
      forwarded_to_original_crm: true,
      proxy_info: {
        normalized_phone: normalizedPhone,
        original_phone: leadData.Phone,
        project: leadData.UsrMinskMir,
        commentary: leadData.Commentary
      }
    })

  } catch (error) {
    console.error('‚ùå Proxy webhook error:', error)
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    })
  }
} 
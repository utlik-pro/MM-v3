import type { NextApiRequest, NextApiResponse } from 'next'
import { ElevenLabsClient } from '../../lib/elevenlabs/client'
import { supabase } from '../../lib/supabase'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { id } = req.query

    if (!id) {
      return res.status(400).json({ 
        error: 'conversation_id is required',
        usage: 'GET /api/conversation-simple?id=<conversation_id_or_elevenlabs_id>'
      })
    }

    console.log(`üîç Fetching conversation: ${id}`)

    let elevenLabsConversationId = id as string

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Supabase conversation_id –∏–ª–∏ ElevenLabs conversation_id
    if (!id.toString().startsWith('conv_')) {
      // –≠—Ç–æ Supabase ID, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ElevenLabs ID
      const { data: conversation, error } = await supabase
        .from('conversations')
        .select('eleven_labs_conversation_id')
        .eq('id', id)
        .single()

      if (error || !conversation?.eleven_labs_conversation_id) {
        return res.status(404).json({
          error: 'Conversation not found in database',
          details: error?.message || 'No ElevenLabs conversation ID found'
        })
      }

      elevenLabsConversationId = conversation.eleven_labs_conversation_id
      console.log(`üìç Mapped Supabase ID ${id} to ElevenLabs ID ${elevenLabsConversationId}`)
    }

    const elevenLabsClient = new ElevenLabsClient({ apiKey: process.env.ELEVENLABS_API_KEY! })
    const result = await elevenLabsClient.getConversation(elevenLabsConversationId)

    if (!result.success || !result.data) {
      return res.status(404).json({
        error: 'Conversation not found',
        details: result.error
      })
    }

    const conversation = result.data

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    let chatHistory: any[] = []
    
    if (conversation.transcript && Array.isArray(conversation.transcript)) {
      chatHistory = conversation.transcript
        .filter((msg: any) => msg.message) // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
        .map((msg: any, index: number) => ({
          id: index,
          role: msg.role === 'agent' ? '–ê–≥–µ–Ω—Ç' : '–ö–ª–∏–µ–Ω—Ç',
          message: msg.message,
          time: msg.time_in_call_secs ? `${msg.time_in_call_secs}—Å` : '',
          has_tool_calls: !!(msg.tool_calls && msg.tool_calls.length > 0),
          tool_info: msg.tool_calls && msg.tool_calls.length > 0 
            ? msg.tool_calls.map((tc: any) => tc.tool_name || 'Unknown tool').join(', ')
            : null
        }))
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ –∏–∑ tool calls
    let leadInfo = null
    if (conversation.transcript) {
      for (const msg of conversation.transcript as any[]) {
        if ((msg as any).tool_calls) {
          for (const toolCall of (msg as any).tool_calls) {
            if (toolCall.tool_name === 'SendToCRMLead' && toolCall.tool_call_data) {
              const leadData = toolCall.tool_call_data
              leadInfo = {
                name: leadData.name || leadData.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                phone: leadData.phone || leadData.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω',
                email: leadData.email || null,
                comment: leadData.comment || leadData.message || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
              }
              break
            }
          }
          if (leadInfo) break
        }
      }
    }

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statistics = {
      total_messages: chatHistory.length,
      agent_messages: chatHistory.filter(msg => msg.role === '–ê–≥–µ–Ω—Ç').length,
      client_messages: chatHistory.filter(msg => msg.role === '–ö–ª–∏–µ–Ω—Ç').length,
      has_lead_capture: !!leadInfo,
      conversation_length_seconds: conversation.call_duration_secs || 0
    }

    return res.status(200).json({
      success: true,
      conversation: {
        id: id as string,
        status: conversation.status || 'unknown',
        created_at: conversation.start_time_unix_secs ? new Date(conversation.start_time_unix_secs * 1000).toISOString() : null,
        language: 'ru', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        duration_secs: conversation.call_duration_secs || null
      },
      chat_history: chatHistory,
      lead_info: leadInfo,
      statistics,
      audio_url: `/api/conversation-audio?id=${id}`, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ
      raw_data_available: {
        has_transcript: !!conversation.transcript,
        has_metadata: !!conversation.metadata,
        has_analysis: !!(conversation as any).analysis
      }
    })

  } catch (error) {
    console.error('‚ùå Conversation details error:', error)
    return res.status(500).json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
} 
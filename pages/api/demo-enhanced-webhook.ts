import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    console.log('üé≠ Running Enhanced Webhook Demo...')

    const demoScenarios = [
      {
        name: 'High-Quality Purchase Intent Lead',
        payload: {
          transcript: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞. –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å –≤–∞—à–∏ —É—Å–ª—É–≥–∏ —Å–µ–≥–æ–¥–Ω—è –∂–µ. –ì–æ—Ç–æ–≤–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Ö–æ—Ä–æ—à–∏–µ –¥–µ–Ω—å–≥–∏. –ú–æ–π –Ω–æ–º–µ—Ä +375 44 555-77-99, email elena.petrova@company.by. –≠—Ç–æ –æ—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ!",
          eleven_labs_conversation_id: "conv_demo_high_quality",
          conversation_end_reason: "user_ended",
          conversation_duration_secs: 180,
          agentId: "agent_01jxkr0mstfk6ttayjsghjm7xc",
          metadata: { demo: true, scenario: "high_quality" }
        }
      },
      {
        name: 'Medium-Quality Information Lead',
        payload: {
          transcript: "–ü—Ä–∏–≤–µ—Ç. –Ø –°–µ—Ä–≥–µ–π. –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö? –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å. –¢–µ–ª–µ—Ñ–æ–Ω +375 25 444-33-22. –°–ø–∞—Å–∏–±–æ.",
          eleven_labs_conversation_id: "conv_demo_medium_quality",
          conversation_end_reason: "timeout",
          conversation_duration_secs: 45,
          agentId: "agent_01jxkr0mstfk6ttayjsghjm7xc",
          metadata: { demo: true, scenario: "medium_quality" }
        }
      },
      {
        name: 'Low-Quality Lead (No Contact)',
        payload: {
          transcript: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –≤–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –ü–æ–∫–∞ –¥—É–º–∞—é. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.",
          eleven_labs_conversation_id: "conv_demo_low_quality",
          conversation_end_reason: "user_ended",
          conversation_duration_secs: 15,
          agentId: "agent_01jxkr0mstfk6ttayjsghjm7xc",
          metadata: { demo: true, scenario: "low_quality" }
        }
      }
    ]

    const results = []

    for (const scenario of demoScenarios) {
      console.log(`üß™ Testing scenario: ${scenario.name}`)
      
      try {
        const webhookResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/webhook/voice-lead-enhanced`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(scenario.payload)
        })

        const webhookResult = await webhookResponse.json()

        results.push({
          scenario: scenario.name,
          status: webhookResponse.status,
          result: webhookResult,
          success: webhookResponse.status === 200
        })

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100))

      } catch (error) {
        results.push({
          scenario: scenario.name,
          status: 500,
          result: { error: error instanceof Error ? error.message : 'Unknown error' },
          success: false
        })
      }
    }

    // –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–º–æ
    const demoStats = {
      total_scenarios: demoScenarios.length,
      successful_scenarios: results.filter(r => r.success).length,
      failed_scenarios: results.filter(r => !r.success).length,
      
      quality_distribution: results
        .filter(r => r.success && r.result.quality_score)
        .map(r => ({
          scenario: r.scenario,
          quality_score: r.result.quality_score,
          lead_created: !!r.result.lead?.id
        })),
      
      leads_created: results
        .filter(r => r.success && r.result.lead?.id)
        .map(r => ({
          scenario: r.scenario,
          lead_id: r.result.lead.id,
          contact_info: r.result.lead.contact_info ? JSON.parse(r.result.lead.contact_info) : null,
          quality_score: r.result.quality_score,
          extracted_entities: r.result.enhanced_analysis
        }))
    }

    console.log('üéØ Demo completed. Results:', demoStats)

    return res.status(200).json({
      success: true,
      message: 'Enhanced webhook demo completed',
      demo_scenarios: demoScenarios.map(s => ({ name: s.name, transcript_preview: s.payload.transcript.substring(0, 100) + '...' })),
      results,
      stats: demoStats,
      recommendations: [
        'High-quality leads with purchase intent receive scores 90+',
        'Leads with complete contact info (name, phone, email) get higher scores',
        'Urgency keywords ("—Å—Ä–æ—á–Ω–æ", "—Å–µ–≥–æ–¥–Ω—è") boost lead quality',
        'Conversation duration and sentiment affect the final score',
        'Enhanced webhook captures more data than basic version'
      ]
    })

  } catch (error) {
    console.error('‚ùå Demo error:', error)
    return res.status(500).json({ 
      error: 'Demo failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
} 
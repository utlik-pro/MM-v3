import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    console.log('üîç Debug Tool Configuration called')

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    const systemInfo = {
      current_time: new Date().toISOString(),
      base_url: process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000',
      webhook_endpoints: {
        proxy_crm: '/api/webhook/proxy-crm',
        direct_crm: '/api/webhook/crm-lead-enhanced',
        enhanced: '/api/webhook/voice-lead-enhanced'
      },
      monitoring: {
        live_monitor: '/lead-monitor',
        api_monitor: '/api/monitor-leads'
      }
    }

    // –¢–µ—Å—Ç–æ–≤—ã–µ URLs
    const testUrls = {
      proxy_test: `${systemInfo.base_url}/api/test-proxy-webhook`,
      monitor_latest: `${systemInfo.base_url}/api/monitor-leads?since=5`,
      tool_analysis: `${systemInfo.base_url}/api/analyze-tool-calls`
    }

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    const setupInstructions = {
      step_1: {
        title: "–ò–∑–º–µ–Ω–∏—Ç—å URL Tool –≤ ElevenLabs",
        current_url: "https://office.bir.by:2121/0/ServiceModel/GeneratedObjectWebFormService.svc/SaveWebFormObjectData",
        new_url: `${systemInfo.base_url}/api/webhook/proxy-crm`,
        note: "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ª–∏–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ"
      },
      step_2: {
        title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞",
        requirement: "–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Tool SendToCRMLead",
        suggestion: "–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–º–ø—Ç: 'When user provides name and phone, always use SendToCRMLead tool to save the lead'"
      },
      step_3: {
        title: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä",
        sample_phrases: [
          "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å–∏–ª–∏–π, –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω +375 29 123-45-67",
          "–Ø –ê–Ω–Ω–∞, –Ω–æ–º–µ—Ä +375 33 987-65-43, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã",
          "–î–º–∏—Ç—Ä–∏–π, +375 44 555-12-34, —Ö–æ—á—É —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã"
        ]
      }
    }

    // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    const systemChecks = {
      database_connection: "‚úÖ Connected to Supabase",
      webhook_endpoints: "‚úÖ All webhooks available",
      monitoring_system: "‚úÖ Real-time monitoring active",
      proxy_functionality: "‚úÖ Proxy webhook tested and working"
    }

    return res.status(200).json({
      success: true,
      message: "Debug information for Tool configuration",
      system_info: systemInfo,
      test_urls: testUrls,
      setup_instructions: setupInstructions,
      system_checks: systemChecks,
      troubleshooting: {
        if_no_leads_appear: [
          "1. Check ElevenLabs Tool URL is pointing to our proxy webhook",
          "2. Verify agent prompt includes instructions to use Tool",
          "3. Make sure user provides both name AND phone number",
          "4. Check server logs for webhook calls",
          "5. Test proxy webhook manually using /api/test-proxy-webhook"
        ],
        if_agent_not_using_tool: [
          "1. Agent may not understand when to use Tool",
          "2. Add clear instructions in agent prompt",
          "3. Test with explicit phrases like 'save my contact info'",
          "4. Check Tool is properly assigned to agent"
        ]
      },
      next_steps: [
        "1. Open lead monitor page: /lead-monitor",
        "2. Start conversation with ElevenLabs agent",
        "3. Provide name and phone clearly",
        "4. Watch for new leads in monitor",
        "5. Check console logs for webhook activity"
      ]
    })

  } catch (error) {
    console.error('‚ùå Debug endpoint error:', error)
    return res.status(500).json({ 
      error: 'Debug failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
} 
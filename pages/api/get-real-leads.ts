import type { NextApiRequest, NextApiResponse } from 'next'
import { createDefaultElevenLabsClient } from '../../lib/elevenlabs'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    console.log('üîç Fetching real leads from ElevenLabs Tools API...')

    const elevenLabsClient = createDefaultElevenLabsClient()
    const targetToolId = 'xi4EFSeulNpmBWxSC9b4'

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö tools
    console.log('üìã Getting tools list...')
    const toolsResult = await elevenLabsClient.listTools()

    if (!toolsResult.success) {
      throw new Error(`Failed to get tools: ${toolsResult.error}`)
    }

    console.log('üõ†Ô∏è Available tools:', toolsResult.data?.tools?.length || 0)

    // –ò—â–µ–º –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π tool
    const targetTool = toolsResult.data?.tools?.find(tool => tool.id === targetToolId)

    if (!targetTool) {
      return res.status(404).json({
        error: 'Target tool not found',
        target_tool_id: targetToolId,
        available_tools: toolsResult.data?.tools?.map(t => ({ 
          id: t.id, 
          name: t.tool_config?.name || 'Unknown', 
          type: 'tool'
        })) || []
      })
    }

    console.log('üéØ Found target tool:', targetTool.tool_config?.name || 'Unknown')

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ tool
    const toolDetailResult = await elevenLabsClient.getTool(targetToolId)

    if (!toolDetailResult.success) {
      throw new Error(`Failed to get tool details: ${toolDetailResult.error}`)
    }

    console.log('üìä Tool details received')

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ submissions/results
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ metadata, parameters –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º endpoint
    const toolDetail = toolDetailResult.data

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ tool
    console.log('üí¨ Getting recent conversations...')
    const conversationsResult = await elevenLabsClient.listConversations({ 
      page_size: 50  // –ë–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π tool
    })

    if (!conversationsResult.success) {
      throw new Error(`Failed to get conversations: ${conversationsResult.error}`)
    }

    console.log('üí¨ Found conversations:', conversationsResult.data?.conversations?.length || 0)

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ tool
    const toolUsageConversations = []
    const realLeadsData = []

    if (conversationsResult.data?.conversations) {
      for (const conversation of conversationsResult.data.conversations) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
          const convDetailResult = await elevenLabsClient.getConversation(conversation.conversation_id)
          
          if (convDetailResult.success && convDetailResult.data) {
            const convDetail = convDetailResult.data
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –Ω–∞—à tool –≤ —ç—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
            const transcript = JSON.stringify(convDetail.transcript || [])
            const metadata = JSON.stringify(convDetail)
            
            // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è tool ID –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (metadata.includes(targetToolId) || 
                transcript.includes('quiz') || 
                transcript.includes('–æ–ø—Ä–æ—Å') ||
                transcript.includes('–∞–Ω–∫–µ—Ç–∞')) {
              
              const endTime = conversation.start_time_unix_secs + conversation.call_duration_secs
              
              toolUsageConversations.push({
                conversation_id: conversation.conversation_id,
                start_time: conversation.start_time_unix_secs,
                end_time: endTime,
                duration: conversation.call_duration_secs,
                transcript: transcript.substring(0, 200) + '...',
                found_tool_usage: metadata.includes(targetToolId)
              })

              // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
              const leadData = extractLeadFromConversation(convDetail, targetToolId)
              if (leadData) {
                realLeadsData.push(leadData)
              }
            }
          }
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100))
          
        } catch (convError) {
          console.warn('Failed to get conversation detail:', conversation.conversation_id, convError)
        }
      }
    }

    console.log('üéØ Found tool usage in conversations:', toolUsageConversations.length)
    console.log('üìã Extracted real leads:', realLeadsData.length)

    return res.status(200).json({
      success: true,
      target_tool: {
        id: targetToolId,
        name: targetTool.tool_config?.name || 'Unknown',
        type: 'tool',
        details: toolDetail
      },
      analysis: {
        total_conversations_checked: conversationsResult.data?.conversations?.length || 0,
        tool_usage_conversations: toolUsageConversations.length,
        real_leads_found: realLeadsData.length
      },
      tool_usage_conversations: toolUsageConversations,
      real_leads_data: realLeadsData,
      recommendations: [
        'Found conversations where the quiz tool was potentially used',
        'Real lead data extracted from conversation transcripts',
        'Consider integrating this data with the enhanced webhook',
        'Tool usage indicates actual user engagement with lead generation'
      ]
    })

  } catch (error) {
    console.error('‚ùå Real leads API error:', error)
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}

function extractLeadFromConversation(conversationDetail: any, toolId: string) {
  const transcript = conversationDetail.transcript || ''
  const conversationId = conversationDetail.conversation_id
  
  // –ë–∞–∑–æ–≤–∞—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const phonePattern = /\+375\s*\(?(\d{2})\)?\s*(\d{3})[- ]?(\d{2})[- ]?(\d{2})/g
  const emailPattern = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g
  const namePatterns = [
    /–º–µ–Ω—è –∑–æ–≤—É—Ç\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?)/i,
    /—è\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?)/i,
    /–∏–º—è\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?)/i
  ]

  const phoneMatch = phonePattern.exec(transcript)
  const emailMatch = emailPattern.exec(transcript)
  
  let nameMatch = null
  for (const pattern of namePatterns) {
    nameMatch = pattern.exec(transcript)
    if (nameMatch) break
  }

  // –¢–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (phoneMatch || emailMatch || nameMatch) {
    return {
      conversation_id: conversationId,
      source_tool_id: toolId,
      extracted_at: new Date().toISOString(),
      contact_info: {
        name: nameMatch ? nameMatch[1].trim() : null,
        phone: phoneMatch ? phoneMatch[0].trim() : null,
        email: emailMatch ? emailMatch[1].trim() : null
      },
      transcript_excerpt: transcript.substring(0, 300),
      conversation_metadata: {
        start_time: conversationDetail.start_time_unix_secs,
        end_time: conversationDetail.end_time_unix_secs,
        duration: conversationDetail.end_time_unix_secs - conversationDetail.start_time_unix_secs,
        agent_id: conversationDetail.agent_id
      }
    }
  }

  return null
} 
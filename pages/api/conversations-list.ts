import type { NextApiRequest, NextApiResponse } from 'next'
import { createDefaultElevenLabsClient } from '../../lib/elevenlabs'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    console.log('üîç Fetching conversations from ElevenLabs...')

    const elevenLabsClient = createDefaultElevenLabsClient()
    const { page = 1, limit = 50 } = req.query

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    const conversationsResult = await elevenLabsClient.listConversations({
      page_size: parseInt(limit as string) || 50
    })

    if (!conversationsResult.success) {
      throw new Error(`Failed to get conversations: ${conversationsResult.error}`)
    }

    const conversations = conversationsResult.data?.conversations || []
    console.log(`üìã Found ${conversations.length} conversations`)

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞–≥–µ–Ω—Ç—É –∏–∑ ENV (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω), –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    const targetAgentId = process.env.ELEVENLABS_AGENT_ID || process.env.NEXT_PUBLIC_ELEVENLABS_AGENT_ID || ''
    const filteredConversations = targetAgentId
      ? conversations.filter(conversation => conversation.agent_id === targetAgentId)
      : conversations
    console.log(`üéØ Filtered to ${filteredConversations.length} conversations` + (targetAgentId ? ` for agent ${targetAgentId}` : ' (no agent filter)'))

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const processedConversations = await Promise.all(
      filteredConversations.map(async (conversation) => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
          const convDetailResult = await elevenLabsClient.getConversation(conversation.conversation_id)
          
          let leadInfo = null
          let hasLead = false
          let topic: string | null = null
          let clientIntent: string | null = null
          let transcriptLength = 0
          
          if (convDetailResult.success && convDetailResult.data) {
            const rawTranscript = (convDetailResult.data as any).transcript
            const transcript = Array.isArray(rawTranscript)
              ? rawTranscript.map((m: any) => (typeof m === 'string' ? m : m?.content || '')).join(' ')
              : (rawTranscript || '') as string
            if (Array.isArray(rawTranscript)) {
              transcriptLength = rawTranscript.length
            } else if (typeof rawTranscript === 'string') {
              transcriptLength = rawTranscript.length
            } else {
              transcriptLength = 0
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            const phonePattern = /\+375\s*\(?(\d{2})\)?\s*(\d{3})[- ]?(\d{2})[- ]?(\d{2})/g
            const namePatterns = [
              /–º–µ–Ω—è –∑–æ–≤—É—Ç\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?)/i,
              /—è\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?)/i,
              /–∏–º—è\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?)/i
            ]

            const phoneMatch = phonePattern.exec(transcript)
            let nameMatch = null
            for (const pattern of namePatterns) {
              nameMatch = pattern.exec(transcript)
              if (nameMatch) break
            }

            if (phoneMatch || nameMatch) {
              hasLead = true
              leadInfo = {
                name: nameMatch ? nameMatch[1].trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                phone: phoneMatch ? phoneMatch[0].trim() : '–ù–µ —É–∫–∞–∑–∞–Ω',
                extracted_from: 'transcript'
              }
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ tool_calls (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try {
              const toolCalls = (convDetailResult.data as any).tool_calls
              if (toolCalls) {
                const serialized = typeof toolCalls === 'string' ? toolCalls : JSON.stringify(toolCalls)
                // –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                const phoneFromTools = /\+?375\s*\(?\d{2}\)?\s*\d{3}[- ]?\d{2}[- ]?\d{2}/i.exec(serialized)
                // –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, –¥–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã/—Å–ª–æ–≤–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
                const nameFromTools = /"name"\s*:\s*"([–ê-–Ø–∞-—è–Å—ëA-Za-z\s]+)"/i.exec(serialized)
                if (phoneFromTools || nameFromTools) {
                  hasLead = true
                  leadInfo = {
                    name: nameFromTools ? nameFromTools[1].trim() : (leadInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    phone: phoneFromTools ? phoneFromTools[0].trim() : (leadInfo?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    extracted_from: leadInfo ? 'transcript+tools' : 'tools'
                  }
                }
              }
            } catch {}

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É/–Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            const intentKeywords: Record<string, string[]> = {
              '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': ['–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è', '–∏–Ω–≤–µ—Å—Ç', '–¥–æ—Ö–æ–¥', '–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞', '–∞—Ä–µ–Ω–¥–∞'],
              '–ü–æ–∫—É–ø–∫–∞ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è': ['–¥–ª—è —Å–µ–±—è', '–∂–∏—Ç—å', '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '—Å–µ–º—å—è'],
              '–ò–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': ['–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∂–∏–ª—å–µ'],
            }
            for (const [candidate, keywords] of Object.entries(intentKeywords)) {
              if (keywords.some(k => transcript.toLowerCase().includes(k))) {
                topic = candidate
                clientIntent = candidate
                break
              }
            }

            // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–¥–∫–∏
            if (!topic && (conversation as any).call_summary_title) {
              topic = (conversation as any).call_summary_title
            }
          }

          const endTime = conversation.start_time_unix_secs + conversation.call_duration_secs
          
          return {
            id: conversation.conversation_id,
            agent_id: conversation.agent_id,
            status: conversation.status,
            call_successful: (conversation as any).call_successful || null,
            start_time: conversation.start_time_unix_secs,
            end_time: endTime,
            duration_seconds: conversation.call_duration_secs,
            duration_formatted: formatDuration(conversation.call_duration_secs),
            start_time_formatted: new Date(conversation.start_time_unix_secs * 1000).toLocaleString('ru-RU'),
            end_time_formatted: new Date(endTime * 1000).toLocaleString('ru-RU'),
            minutes_ago: Math.round((Date.now() - conversation.start_time_unix_secs * 1000) / (1000 * 60)),
            has_lead: hasLead,
            lead_info: leadInfo,
            title: (conversation as any).call_summary_title || null,
            topic: topic,
            client_intent: clientIntent,
            transcript_length: transcriptLength,
            metadata: {
              agent_id: conversation.agent_id,
              call_duration_secs: conversation.call_duration_secs,
              status: conversation.status
            }
          }
        } catch (error) {
          console.warn(`Failed to process conversation ${conversation.conversation_id}:`, error)
          return {
            id: conversation.conversation_id,
            agent_id: conversation.agent_id,
            status: conversation.status,
            call_successful: (conversation as any).call_successful || null,
            start_time: conversation.start_time_unix_secs,
            end_time: conversation.start_time_unix_secs + conversation.call_duration_secs,
            duration_seconds: conversation.call_duration_secs,
            duration_formatted: formatDuration(conversation.call_duration_secs),
            start_time_formatted: new Date(conversation.start_time_unix_secs * 1000).toLocaleString('ru-RU'),
            end_time_formatted: new Date((conversation.start_time_unix_secs + conversation.call_duration_secs) * 1000).toLocaleString('ru-RU'),
            minutes_ago: Math.round((Date.now() - conversation.start_time_unix_secs * 1000) / (1000 * 60)),
            has_lead: false,
            lead_info: null,
            title: conversation.call_summary_title || null,
            topic: (conversation as any).call_summary_title || null,
            client_intent: null,
            transcript_length: 0,
            error: 'Failed to process conversation'
          }
        }
      })
    )

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalConversations = filteredConversations.length
    const conversationsWithLeads = processedConversations.filter(conv => conv.has_lead).length
    const totalDuration = processedConversations.reduce((sum, conv) => sum + conv.duration_seconds, 0)
    const avgDuration = totalConversations > 0 ? Math.round(totalDuration / totalConversations) : 0

    const stats = {
      total_conversations: totalConversations,
      conversations_with_leads: conversationsWithLeads,
      lead_extraction_rate: totalConversations > 0 ? Math.round((conversationsWithLeads / totalConversations) * 100) : 0,
      total_duration_seconds: totalDuration,
      avg_duration_seconds: avgDuration,
      avg_duration_formatted: formatDuration(avgDuration)
    }

    console.log('üìä Conversations stats:', stats)

    return res.status(200).json({
      success: true,
      conversations: processedConversations,
      stats,
      pagination: {
        page: parseInt(page as string) || 1,
        limit: parseInt(limit as string) || 50,
        total: totalConversations
      }
    })

  } catch (error) {
    console.error('‚ùå Conversations API error:', error)
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}

function formatDuration(seconds: number): string {
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  const secs = seconds % 60
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`
  } else {
    return `${secs}—Å`
  }
} 
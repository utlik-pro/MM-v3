import { useState, useEffect, useCallback } from 'react';

interface UnreadLeadsHook {
  unreadCount: number;
  markAllAsRead: () => void;
  markLeadAsRead: (leadId: string) => void;
  refresh: () => void;
}

export function useUnreadLeads(): UnreadLeadsHook {
  const [unreadCount, setUnreadCount] = useState(0);
  const [lastChecked, setLastChecked] = useState<number>(Date.now());

  // –ö–ª—é—á –¥–ª—è localStorage
  const STORAGE_KEY = 'minsk_mir_last_lead_check';
  const READ_LEADS_KEY = 'minsk_mir_read_leads';

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ localStorage
  const getLastChecked = useCallback(() => {
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem(STORAGE_KEY);
      return stored ? parseInt(stored) : Date.now();
    }
    return Date.now();
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
  const getReadLeads = useCallback((): Set<string> => {
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem(READ_LEADS_KEY);
      return stored ? new Set(JSON.parse(stored)) : new Set();
    }
    return new Set();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
  const saveReadLeads = useCallback((readLeads: Set<string>) => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(READ_LEADS_KEY, JSON.stringify(Array.from(readLeads)));
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
  const countUnreadLeads = useCallback(async () => {
    try {
      const lastCheck = getLastChecked();
      const readLeads = getReadLeads();

      console.log('üîç Checking unread leads since:', new Date(lastCheck).toISOString());

      const response = await fetch(`/api/leads/new-leads?since=${lastCheck}`);
      if (!response.ok) {
        console.error('‚ùå Failed to fetch new leads');
        return;
      }

      const data = await response.json();
      const allNewLeads = data.newLeads || [];

      // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–∏–¥—ã
      const unreadLeads = allNewLeads.filter((lead: any) => !readLeads.has(lead.id));
      
      console.log('üìä Unread leads count:', unreadLeads.length);
      setUnreadCount(unreadLeads.length);

    } catch (error) {
      console.error('‚ùå Error counting unread leads:', error);
    }
  }, [getLastChecked, getReadLeads]);

  // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ª–∏–¥—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = useCallback(() => {
    const now = Date.now();
    if (typeof window !== 'undefined') {
      localStorage.setItem(STORAGE_KEY, now.toString());
    }
    setLastChecked(now);
    setUnreadCount(0);
    console.log('‚úÖ Marked all leads as read');
  }, []);

  // –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏–¥ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
  const markLeadAsRead = useCallback((leadId: string) => {
    const readLeads = getReadLeads();
    readLeads.add(leadId);
    saveReadLeads(readLeads);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    countUnreadLeads();
    console.log('‚úÖ Marked lead as read:', leadId);
  }, [getReadLeads, saveReadLeads, countUnreadLeads]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  const refresh = useCallback(() => {
    countUnreadLeads();
  }, [countUnreadLeads]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const storedLastChecked = getLastChecked();
    setLastChecked(storedLastChecked);
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
    countUnreadLeads();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(countUnreadLeads, 30000);

    return () => clearInterval(interval);
  }, [getLastChecked, countUnreadLeads]);

  return {
    unreadCount,
    markAllAsRead,
    markLeadAsRead,
    refresh
  };
} 